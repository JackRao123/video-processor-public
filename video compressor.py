import os
from moviepy.editor import *

import threading
import time
import sys
import math

 
#returns: [parent_folder, file_name (or folder name), file_extension]
def get_path_info(path):
    parent_folder = path[: path.rfind("\\")]

    #file_name will either be name of file or name of folder. depends.
    file_name = None
    extension = None
    if("." in path):
        #then its a file 
        file_name = path[path.rfind("\\")+1: path.rfind(".")]
        extension = path[path.rfind(".")+  1:]
    else:
        file_name = path[parent_folder.rfind("\\"): path.rfind("\\")]

    
    return [parent_folder, file_name, extension]



#This function is working 11/06/2023
#Sometimes it might appear, that when using threading, the videos generated by this are corrupted. However, they work perfectly on iphone which is all that matters.
def compress_video(input_file_path, output_file_path, target_size):
    if os.path.getsize(input_file_path) <= target_size:
        print(f"Not compressing {input_file_path}. File already under target size.")
        return 
    
    original_path = input_file_path
    index = 0    
    path_info = get_path_info(input_file_path)
    output_folder = path_info[0]

    while os.path.getsize(input_file_path) > target_size:
        video = VideoFileClip(input_file_path)
        scale = (target_size / os.path.getsize(input_file_path))**(0.25)
        resized_video = video.resize(scale)


        output_path = f"{output_folder}\\{path_info[1]}TEMP{index}.mp4"
        resized_video.write_videofile(output_path, verbose=False, logger=None)
        input_file_path = output_path
        index += 1
        resized_video.close()

    if output_file_path == original_path:
        os.remove(output_file_path)
    
    try:
        #wait 2 seconds for filesystem to process the video?? idk ?? unless if you .rename too fast it corrupts? not sure
        time.sleep(2)
        os.rename(f"{output_folder}\\{path_info[1]}TEMP{index-1}.mp4", output_file_path)
    except FileExistsError:
        print(f"Could not compress file {input_file_path}. File {output_file_path} already exists.")
        pass
    
    for i in range(index-1):
        temp_file_path = f"{output_folder}\\temp{i}.mp4"
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

    print(f"Finished compressing {input_file_path}. Compressed size = {os.path.getsize(output_file_path)}.")

        

def compress_video_thread(video_full_path, output_file_name, target_size):
    thread = threading.Thread(target = compress_video, args=(video_full_path, output_file_name, target_size,))
    return thread


if __name__ == '__main__':
     
    if len(sys.argv) > 1:
        #If this happens then the function is being called from command line (likely from my JS discord bot.)
        CLI_ARGUMENTS = sys.argv[1:]
        compress_video_thread(video_full_path=CLI_ARGUMENTS[0], output_file_name=CLI_ARGUMENTS[1], target_size=int(CLI_ARGUMENTS[2]))



 